<program> -> <elements>*

<expr> -> <element>
        | <arithmetic>
        | <conditional>
        | <not>
        | <let>
        | <begin>
        | <list>

<element> -> NUMBER
           | ID
           | <object>
           | STRING
           | CHAR
           | <object_message>
           | <function_call>
           | <lambda>
           | BOOLEAN
           | ( <expr> )

<arithmetic> -> <element> 
              | <element> <aop> <arithmetic>

<conditional> -> <element>
               | <element> <cop> <conditional>

<not> -> NOT <expr>

<let> -> <element> = <expr>

<begin> -> BEGIN ( <expr_list> )

<list> -> LIST ( <expr_list> )

<expr_list> -> <expr>
             | <expr_list> , <expr>

<object> -> { ID : <expr_list> }

<lambda> -> [ <expr_list> '|' <expr> ] <where>?
          | <lambda> , [ <expr_list> | <expr> ] <where>?

<where> -> : ( <let_list> )

<object_message> -> <element> -> ID

<function_call> -> <lambs> ( <expr_list> )

<lambs> -> ID
         | <object_message>
         | <function_call>
         | <lambda>
