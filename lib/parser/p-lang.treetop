grammar PLang

  rule statements
    (spaces? statement spaces?)* <NStatements>
  end
  
  rule statement
    binop / let / object_call / expr
  end

  rule object_call
    expr spaces? '->' spaces? id sspaces? '(' spaces? call_params? spaces? ')' /
    expr spaces? '->' spaces? id spaces?
  end
  
  rule let
    var spaces? '=' spaces? statement /
    object_form spaces? '->' spaces? var spaces? '=' spaces? statement
  end
  
  rule var
    id / object
  end
  
  rule binop
    expr spaces? op spaces? statement <NBinOp>
  end

  rule op
    '+' / '-' / '*' / '/' / '%' / '>=' / '<=' / '>' / '<' / '==' 
  end

  rule begin
    'begin' spaces? '(' spaces? call_params? spaces? ')'
  end

  rule if
    'if' spaces? '(' spaces? statement spaces? ',' statement spaces? ',' statement spaces? ')'
  end

  rule call
    begin /
    if /
    (id / lambda) sspaces? '(' spaces? call_params? spaces? ')'
  end

  rule sspaces
    [\s\t]*
  end
  
  rule call_params
    statement spaces? call_params? / (spaces? ',' spaces? statement)+
  end
  
  rule expr
	number / call / id / object / char / string / lambda / parem_expr
  end

  rule parem_expr
    '(' spaces? statement spaces? ')' <NParemExpr>
  end
  
  rule statement_list
    statement spaces?  stm_list:statement_list? / (spaces? ',' spaces? statement)+ 
  end
  
  rule lambda
    '[' spaces? lambda_params? spaces? statement spaces? ']' spaces? where?
  end
  
  rule where
    ':' spaces? '(' spaces? where_params spaces? ')'
  end

  rule where_params
    let spaces? where_params? / (spaces? ',' spaces? let)+
  end

  rule lambda_params
    lambda_params_list spaces? '|'
  end
  
  rule lambda_params_list
	  form spaces? lambda_params_list? / (spaces? ',' spaces? form)+
  end
  
  rule form
	  number / id / object_form / char / string
  end
  
  rule object_form
    '{' spaces? id spaces? object_form_list? spaces? '}'
  end
  
  rule object_form_list
    ':' spaces? lambda_params_list
  end
  
  rule object
	  '{' spaces? id spaces? obj_list:object_list? spaces? '}' <NObject>
  end
  
  rule object_list
    ':' spaces?  statement_list <NObjectList>
  end
  
  rule id
    [a-zA-Z_0-9]+ <NId>
  end
  
  rule string
    "\"" (!"\"" .)* "\""
  end
  
  rule char
    "'" (!"'" .) "'"
  end

  rule number
	  decimal / integer
  end
  
  rule decimal
	  sign? spaces? digits? dot digits <NDecimal>
  end
  
  rule integer
	  sign? spaces? digits <NInteger>
  end
  
  rule digits
	  digit+
  end
  
  rule digit
	  [0-9]
  end
  
  rule sign
    "-"
  end
  
  rule dot
	  "."
  end
  
  rule spaces
    space* ("#" (!break .)* break+ space*)*
  end
  
  rule space
    [\r\n\t\s]
  end
  
  rule break
    [\r\n]
  end
  
end
