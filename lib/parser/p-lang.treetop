grammar PLang

  rule statements
    (spaces? statement spaces?)* <NStatements>
  end
  
  rule statement
    unop / binop / let / object_op / expr
  end

  rule object_op
    object_msg /
    object_get
  end

  rule object_msg
    expr spaces? '->' spaces? id sspaces? '(' spaces? statement_list:statement_list? spaces? ')' <NObjectMsg>
  end

  rule object_get
    expr spaces? '->' spaces? id spaces? <NObjectGet>
  end

  rule let
    var_let /
    obj_let
  end

  rule var_let
    var spaces? '=' spaces? statement <NVarLet>
  end

  rule obj_let
    object_form spaces? '->' spaces? var spaces? '=' spaces? statement <NObjectLet>
  end
  
  rule var
    id / object
  end

  rule unop
     'not' spaces? statement <NUnOp>
  end
  
  rule binop
    expr spaces? op spaces? statement <NBinOp>
  end

  rule op
    '+' / '-' / '*' / '/' / '%' / '>=' / '<=' / '>' / '<' / '==' / 'and' / 'or'
  end

  rule call
    cid:(id / lambda) sspaces? '(' spaces? cparams:statement_list? spaces? ')' <NCall>
  end

  rule sspaces
    [\s\t]*
  end
  
  rule expr
	number / boolean / call / id / object / char / string / lambda / parem_expr
  end

  rule parem_expr
    '(' spaces? statement spaces? ')' <NParemExpr>
  end
  
  rule statement_list
    cstatement_list / statement
  end

  rule cstatement_list
    statement spaces?  ',' spaces? statement_list <NCStatementList>
  end
  
  rule lambda
    clamb / lamb
  end

  rule clamb
    lamb spaces? ',' spaces? lambda <NCLambda>
  end

  rule lamb
    '[' spaces? params:lambda_params? spaces? statement spaces? ']' spaces? where:where? <NLambda>
  end
  
  rule where
    ':' spaces? '(' spaces? where_params spaces? ')' <NWhere>
  end

  rule where_params
    cwhere_params / let
  end

  rule cwhere_params
    let spaces? ',' spaces? where_params <NCWhereParams>
  end

  rule lambda_params
    lambda_params_list spaces? '|' <NLambdaParams>
  end
  
  rule lambda_params_list
    clambda_params_list / form
  end

  rule clambda_params_list
    form spaces? ',' spaces? lambda_params_list <NCLambdaParamsList>
  end
  
  rule form
	  number / id / object_form / char / string
  end
  
  rule object_form
    '{' spaces? id spaces? obj_form_list:object_form_list? spaces? '}' <NObjectForm>
  end
  
  rule object_form_list
    ':' spaces? lambda_params_list <NLambdaParams>
  end
  
  rule object
	  '{' spaces? id spaces? obj_list:object_list? spaces? '}' <NObject>
  end
  
  rule object_list
    ':' spaces?  statement_list <NObjectList>
  end

  rule boolean
    (true / false) <NBoolean>
  end

  rule true
    "true"
  end

  rule false
    "false"
  end
  
  rule id
    [a-zA-Z_0-9]+ <NId>
  end
  
  rule string
    "\"" str:(!"\"" .)* "\"" <NString>
  end
  
  rule char
    "'" c:(!"'" .) "'" <NChar>
  end

  rule number
	  decimal / integer
  end
  
  rule decimal
	  sign? spaces? digits? dot digits <NDecimal>
  end
  
  rule integer
	  sign? spaces? digits <NInteger>
  end
  
  rule digits
	  digit+
  end
  
  rule digit
	  [0-9]
  end
  
  rule sign
    "-"
  end
  
  rule dot
	  "."
  end
  
  rule spaces
    space* ("#" (!break .)* break+ space*)*
  end
  
  rule space
    [\r\n\t\s]
  end
  
  rule break
    [\r\n]
  end
  
end
